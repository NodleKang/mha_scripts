# define VIP UP/DOWN command 부분에 Master의 VIP를 입력한다.

#!/usr/bin/env perl
​
# Copyright (C) 2011 DeNA Co.,Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
# Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
​
## Note: This is a sample script and is not complete. Modify the script based on your environment.
​
use strict;
use warnings FATAL => 'all';
​
use Getopt::Long;
use MHA::DBHelper;
​
my (
 $command,       $ssh_user,        $orig_master_host,
 $orig_master_ip, $orig_master_port, $new_master_host,
 $new_master_ip, $new_master_port, $new_master_user,
 $new_master_password
);
​
​
GetOptions(
 'command=s'            => \$command,
 'ssh_user=s'           => \$ssh_user,
 'orig_master_host=s'   => \$orig_master_host,
 'orig_master_ip=s'     => \$orig_master_ip,
 'orig_master_port=i'   => \$orig_master_port,
 'new_master_host=s'    => \$new_master_host,
 'new_master_ip=s'      => \$new_master_ip,
 'new_master_port=i'    => \$new_master_port,
 'new_master_user=s'    => \$new_master_user,
 'new_master_password=s' => \$new_master_password,
);
​
#todo: check $ssh_user not assigned from config file.
if(!$ssh_user) {
 $ssh_user = "mysql";
}
​
if(!$new_master_host) {
 $new_master_host = $orig_master_host;
};
##############################################
# define VIP UP/DOWN Command
my $vip = "**.**.**.**/24"; # Virtual IP/subnet mask(/24=255.255.255.0)
my $eth_no = "eth0";
my $key = "1";
my $ssh_start_vip = "sudo /usr/sbin/ifconfig $eth_no:$key $vip up ";
my $ssh_stop_vip = "sudo /usr/sbin/ifconfig $eth_no:$key down ";
my $ssh_send_garp = "sudo /usr/sbin/arping -q -A -c 1 -I $eth_no 10.80.36.25";
​
##############################################
​
​
exit &main();
​
sub main {
​
 ##############################################
 print "\n\nIN SCRIPT TEST====$ssh_stop_vip==$ssh_start_vip===\n\n";
 ##############################################
​
 if ( $command eq "stop" || $command eq "stopssh" ) {
​
   # $orig_master_host, $orig_master_ip, $orig_master_port are passed.
   # If you manage master ip address at global catalog database,
   # invalidate orig_master_ip here.
   my $exit_code = 1;
   eval {
​
     ##############################################
     print "Disabling the VIP on old master: $orig_master_host \n";
     &stop_vip();
     ##############################################
​
     # updating global catalog, etc
     $exit_code = 0;
   };
   if ($@) {
     warn "Got Error: $@\n";
     exit $exit_code;
   }
   exit $exit_code;
 }
 elsif ( $command eq "start" ) {
​
   # all arguments are passed.
   # If you manage master ip address at global catalog database,
   # activate new_master_ip here.
   # You can also grant write access (create user, set read_only=0, etc) here.
   my $exit_code = 10;
   eval {
     my $new_master_handler = new MHA::DBHelper();
​
     # args: hostname, port, user, password, raise_error_or_not
     $new_master_handler->connect( $new_master_ip, $new_master_port,
       $new_master_user, $new_master_password, 1 );
​
     ## Set read_only=0 on the new master
     $new_master_handler->disable_log_bin_local();
     print "Set read_only=0 on the new master.\n";
     $new_master_handler->disable_read_only();
​
     ## Creating an app user on the new master
     #print "Creating app user on the new master..\n";    #주석처리
     #FIXME_xxx_create_user( $new_master_handler->{dbh} ); #주석처리
     $new_master_handler->enable_log_bin_local();
     $new_master_handler->disconnect();
​
     ## Update master ip on the catalog database, etc
     #FIXME_xxx; #주석처리
​
     ##############################################
     print "Enabling the VIP - $vip on the new master - $new_master_host \n";
     &start_vip();
     ##############################################
​
     $exit_code = 0;
   };
   if ($@) {
     warn $@;
​
     # If you want to continue failover, exit 10.
     exit $exit_code;
   }
   exit $exit_code;
 }
 elsif ( $command eq "status" ) {
​
   ##############################################
   print "Checking the Status of the script.. \n";
   ##############################################
​
   # do nothing
   exit 0;
 }
 else {
   &usage();
   exit 1;
 }
}
​
##############################################
## A simple system call that ENABLE the VIP on the NEW master
sub start_vip() {
   `ssh -tt -o "StrictHostKeyChecking=no" $ssh_user\@$new_master_host \" $ssh_start_vip \"`;
   `sleep 1`;
   `ssh -tt -o "StrictHostKeyChecking=no" $ssh_user\@$new_master_host \" $ssh_send_garp \"`;
}
## A simple system call that DISABLE the VIP on the OLD master
sub stop_vip() {
   `ssh -tt -o "StrictHostKeyChecking=no" $ssh_user\@$orig_master_host \" $ssh_stop_vip \"`;
   `sleep 1`;
#   `ssh -o "StrictHostKeyChecking=no" root\@$orig_master_host \" $ssh_stop_vip \"`;
}
##############################################
​
sub usage {
 print
Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n;
}
